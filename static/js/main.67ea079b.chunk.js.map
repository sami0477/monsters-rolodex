{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","onChange","type","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,YAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,mCAAOL,EAAMG,QAAQG,KAArB,OACA,kCAAMN,EAAMG,QAAQI,MAApB,YCHKC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJtBO,G,MAAY,SAAC,GAAD,IAAIC,EAAJ,EAAIA,YAAaC,EAAjB,EAAiBA,aAAjB,OACrB,uBACAZ,UAAU,SACVa,SAAUD,EACVE,KAAK,SACLH,YAAaA,MCuCFI,E,kDAxCb,aAAe,IAAD,8BACZ,gBAaFH,aAAe,SAACI,GACd,EAAKC,SAAU,CAAEC,YAAaF,EAAEG,OAAOC,SAbvC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,gEAQO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAU,CAAET,SAAUkB,S,+BAOlC,IAAD,EAE2BC,KAAKN,MAA/Bb,EAFD,EAECA,SAAUU,EAFX,EAEWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,gBAChD5B,EAAQI,MAAMwB,cAAcC,SAASb,EAAYY,kBAGnD,OACE,sBAAK9B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CACAW,YAAY,kBACZC,aAAce,KAAKf,eAEnB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAnCVI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.67ea079b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\r\n        <h2> { props.monster.name } </h2>\r\n        <p> { props.monster.email } </p>\r\n    </div>\r\n)\r\n\r\n// 0300-6889698\r\n// 0331-2\r\n// Zaina asad and aman asad \r\n// Munazza Riaz Number \r\n// 0331-\r\n","import React from \"react\";\r\nimport {Card} from  \"../card/card.component\"\r\nimport \"./card-list.styles.css\";\r\n\r\nexport const CardList = props => (\r\n    <div className='card-list'>\r\n        {\r\n            props.monsters.map(monster => (\r\n                <Card key={monster.id} monster={monster}/>\r\n            ))\r\n\r\n        }\r\n    </div>\r\n)\r\n\r\n\r\n{\r\n    // Components take in props\r\n    // Whatever comes in the CardList Component will be available in props.children in component file */\r\n    // Itterating over an array and creating new elements\r\n    // .map returns us the return of whatever function that we pass to it\r\n    // itterating over every element in the array\r\n}","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\n\r\nexport const SearchBox = ( { placeholder, handleChange } ) => (\r\n    <input \r\n    className='search'\r\n    onChange={handleChange} \r\n    type='search' \r\n    placeholder={placeholder} \r\n    />\r\n\r\n)\r\n\r\n\r\n// Function components UNLIKE class components dont have access to state\r\n// because they dont have access to constructor method and they also dont\r\n// have access to life-cycle methods\r\n","import React, { Component } from 'react'\r\nimport './App.css';\r\nimport { CardList } from './components/card-list/card-list.component' \r\nimport { SearchBox } from './components/search-box/search-box.component'\r\n\r\n\r\nclass App extends Component {\r\n  \r\n  constructor() {\r\n    super();  \r\n    this.state = {\r\n      monsters: [],\r\n      searchField: ''\r\n    }\r\n  }\r\n  \r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users => this.setState( { monsters: users } ))\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState( { searchField: e.target.value } )\r\n  }\r\n\r\n  render() {\r\n    \r\n    const { monsters, searchField } = this.state;\r\n    const filteredMonsters = monsters.filter(monster => \r\n      monster.name.toLowerCase().includes(searchField.toLowerCase()) ||\r\n      monster.email.toLowerCase().includes(searchField.toLowerCase())  \r\n    )\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1> Monsters Rolodex </h1>\r\n        <SearchBox \r\n        placeholder='Search Monsters'\r\n        handleChange={this.handleChange} \r\n        />\r\n        <CardList monsters={filteredMonsters} /> \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n\r\n// Import Assets\r\n// Using class compnent we get acces to state\r\n// super() calls constructor function onto our compnent class giving \r\n// us access to this.state on out class App\r\n// State is an Object with properties\r\n// Mounting is when react puts our component on the page for the \r\n// first time it calls a block of code we write\r\n// Fetch() grabs the data from the given url and returns a promise\r\n// Promise gives us a response\r\n// Returns response in json format \r\n// Assigning users data to monsters and pushing it to the monsters array\r\n// e => () represents the synthetic even occuring at the input field\r\n// setState lags one letter behind when entering the value because\r\n// it is an asynchronus call so it happend almost immediately\r\n// Running the rest of the code after an asynchronous action or event\r\n// is something that actually takes indefinite amount of time so js runs the\r\n// rest of the code after and when the asynchronous event finishes it then \r\n// runs the finished event so to solve the lag behind issue of the input we \r\n// ","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n// Replaces div#root from ./../public/index.html\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}